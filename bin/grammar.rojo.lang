# Symbol Diagram
#
#          Chars | Meaning
#     (...)      : Grouping
#     |          : Or
#     *          : 0 or more
#     ?          : Optional (0 or 1)
#     ... : ...  : Grammar element
#     #          : Comment (to end of line)
#     CAPS:...   : Token of that type (with value if neccessary)
#
# NOTE: This file keeps track of how the PARSER manipulates tokens to create the
# Abstract Syntax Tree. Therefore, spaces can be used liberally with no effects.

var-def : ((KEYWORD:int|KEYWORD:float)? IDENTIFIER EQ)? expr

expr    : term ((PLUS|MINUS) term)*

term    : factor ((MUL|DIV|MOD) factor)*

factor  : (PLUS|MINUS)? factor
        : pow

pow     : unit (POW factor)*

unit    : INT|FLOAT|IDENTIFIER
        : LPAREN var-def RPAREN

# If something is lower in the file, it means that it has higher precedence.
# This is why you see the rule for handling multiplication below the rule for
# handling addition.

# When writing in this file, please do not go over 80 columns on one line. To
# wrap them, cut the comment at the 80 column mark, and add it as a comment on
# the next line, like so.

# If you look at the parser code, you will always start with the first element
# in this file.